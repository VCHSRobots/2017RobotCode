// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.commands;
import java.util.ArrayList;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4415.SteamShipBot1Final.PIDController;
import org.usfirst.frc4415.SteamShipBot1Final.PIDRobotDriveMove;
import org.usfirst.frc4415.SteamShipBot1Final.Robot;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class AutoDeliverCenterGear extends Command {
	
	RobotDrive robotDrive = Robot.driveTrain.getRobotDrive();
	ArrayList<PIDController> autoProgram;
	Encoder encoder = Robot.driveTrain.getEncoder();
	int autoStage = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDeliverCenterGear() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.driveTrain);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	autoStage = 0;
    	double pGain = Robot.tableReader.get("pgain", .01);
    	double deadband = Robot.tableReader.get("deadband", 0.18);
    	double clipping = Robot.tableReader.get("clipping", 0.75);
    	autoProgram = new ArrayList<>();
    	autoProgram.add(new PIDRobotDriveMove(
    			robotDrive, 1000, 10, 5000));
    	autoProgram.get(0).setPGain(pGain);
    	autoProgram.get(0).setDeadband(deadband);
    	autoProgram.get(0).setClipping(clipping);
    	autoProgram.add(new PIDRobotDriveMove(
    			robotDrive, -200, 10, 5000));
    	autoProgram.get(1).setPGain(pGain);
    	autoProgram.get(1).setDeadband(deadband);
    	autoProgram.get(1).setClipping(clipping);    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
	    if(autoStage < autoProgram.size()){
	    	autoProgram.get(autoStage).run(encoder.get());
	    	if(autoStage==0 && autoProgram.get(autoStage).isDone()){
	    		Robot.gearHandler.gearRelease();
	    		//WILL THIS DELAY WORK?
	    		Timer.delay(.5);
	    	}
	    	if(autoProgram.get(autoStage).isDone()){
	    		autoStage++;
	    	}
	    }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

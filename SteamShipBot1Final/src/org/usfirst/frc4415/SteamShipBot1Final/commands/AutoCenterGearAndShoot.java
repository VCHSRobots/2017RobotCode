// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.commands;
import java.util.ArrayList;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4415.SteamShipBot1Final.PIDController;
import org.usfirst.frc4415.SteamShipBot1Final.PIDRobotDriveMove;
import org.usfirst.frc4415.SteamShipBot1Final.PIDRobotDriveRotate;
import org.usfirst.frc4415.SteamShipBot1Final.PIDTurret;
import org.usfirst.frc4415.SteamShipBot1Final.Robot;
import org.usfirst.frc4415.SteamShipBot1Final.subsystems.Turret;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class AutoCenterGearAndShoot extends Command {
	
	ArrayList<PIDController> autoProgram;
	RobotDrive robotDrive = Robot.driveTrain.getRobotDrive();
	Turret turret = Robot.turret;
	Encoder encoder = Robot.driveTrain.getEncoder();
	AHRS navX = Robot.navX;
	int autoStage = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoCenterGearAndShoot() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.driveTrain);
    	requires(Robot.turret);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	autoStage = 0;
    	double pGain = Robot.tableReader.get("pgain", .01);
    	double deadband = Robot.tableReader.get("deadband", 0.18);
    	double clipping = Robot.tableReader.get("clipping", 0.75);
    	double pGainRotate = Robot.tableReader.get("pgainrotate",  0.3);
    	double deadbandRotate = Robot.tableReader.get("deadbandrotate", 0.3);
    	double clippingRotate = Robot.tableReader.get("clippingrotate", 1);
    	
    	autoProgram = new ArrayList<>();
    	
    	// move toward gear
    	autoProgram.add(new PIDRobotDriveMove(
    			robotDrive, 1000, 10, 5000));
    	autoProgram.get(0).setPGain(pGain);
    	autoProgram.get(0).setDeadband(deadband);
    	autoProgram.get(0).setClipping(clipping);
    	
    	// move away from gear
    	autoProgram.add(new PIDRobotDriveMove(
    			robotDrive, -200, 10, 5000));
    	autoProgram.get(1).setPGain(pGain);
    	autoProgram.get(1).setDeadband(deadband);
    	autoProgram.get(1).setClipping(clipping);  
    	
    	// rotate towards boiler
    	if(Robot.autoParams.getSide().equals("blue")){
    	autoProgram.add(new PIDRobotDriveRotate(
    			robotDrive, 27, true, 10, 5000));
    	} else {
    		autoProgram.add(new PIDRobotDriveRotate(
        			robotDrive, -27, true, 10, 5000));
    	}
    	autoProgram.get(2).setPGain(pGainRotate);
    	autoProgram.get(2).setDeadband(deadbandRotate);
    	autoProgram.get(2).setClipping(clippingRotate); 
    	
    	// move towards boiler
    	autoProgram.add(new PIDRobotDriveMove(
    			robotDrive, -1000, 10, 5000));
    	autoProgram.get(3).setPGain(pGain);
    	autoProgram.get(3).setDeadband(deadband);
    	autoProgram.get(3).setClipping(clipping);
    	
    	// switch to mecanum, aim drivetrain at boiler
    	autoProgram.add(new PIDRobotDriveRotate(
    			robotDrive, 0, false, .2, 3000));
    	autoProgram.get(4).setPGain(pGainRotate);
    	autoProgram.get(4).setDeadband(deadbandRotate);
    	autoProgram.get(4).setClipping(clippingRotate);
    	
    	// aim turret at boiler
    	autoProgram.add(new PIDTurret(
    			turret, 0, .02, 3000));
    	autoProgram.get(5).setPGain(3);
    	autoProgram.get(5).setDeadband(1/8);
    	autoProgram.get(5).setClipping(1);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
	    if(autoStage < autoProgram.size()){
	    	double feedback = 0;
	    	if(autoStage==0 ||autoStage==1 ||autoStage==3) feedback = encoder.get();
	    	else if (autoStage==2) feedback = navX.getAngle();
	    	else if (autoStage==4 || autoStage==5) feedback = 0; // GET TARGET DATA HERE
	    	else feedback = 0;
	    	autoProgram.get(autoStage).run(feedback);
	    	if(autoStage==0 && autoProgram.get(autoStage).isDone()){
	    		Robot.gearHandler.gearRelease();
	    		//WILL THIS DELAY WORK?
	    		Timer.delay(.5);
	    	}
	    	if(autoStage==1 && autoProgram.get(autoStage).isDone()){
	    		Robot.gearHandler.handlerIn();
	    		Robot.shooter.toggleShooter();
	    	}
	    	if(autoStage==3 && autoProgram.get(autoStage).isDone()){
	    		Robot.driveTrain.setMecanum();
	    	}
	    	
	    	if(autoProgram.get(autoStage).isDone()){
	    		autoStage++;
	    	}
	    } else {
	    	Robot.blender.set(Robot.tableReader.get("blender", 1));
	    }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

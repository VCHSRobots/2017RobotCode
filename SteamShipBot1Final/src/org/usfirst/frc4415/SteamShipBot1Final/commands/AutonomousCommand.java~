// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4415.SteamShipBot1Final.Robot;

/**
 *
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    	requires(Robot.driveTrain);
    	
    }
    
	int direction = 1;
    long startTime;
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	startTime = System.currentTimeMillis();
    	Robot.driveTrain.resetEncoder();
        Robot.gearHandler.autoHandlerIn();
        Robot.gearHandler.autoGearGrab();
        
    }

	
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

    	if(System.currentTimeMillis() - startTime > 3000){
    		direction = direction * -1;
    		startTime = System.currentTimeMillis();
    		Robot.driveTrain.resetEncoder();
    	}
    	
    	double pGain = -.01; //-.05 for Gear Forward
    	double clipping = 0.3;
    	int setPoint = 256 * direction;
    	int encoder = Robot.driveTrain.getEncoder();
    	double pTerm = pGain * (setPoint - encoder);
    	double yValue = Math.max(clipping * -1, Math.min(clipping, pTerm));
    	
    	Robot.driveTrain.steamArcadeDrive(yValue, 0);
    	
    	SmartDashboard.putNumber("Drive Encoder", encoder);
    	System.out.println("yValue = " + yValue + "    Encoder: " + encoder);

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4415.SteamShipBot1Final.Robot;

/**
 *
 */
public class ShooterDefault extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ShooterDefault() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
/*
    final double minSpeed = 1010;
    final double maxSpeed = minSpeed + 20;
    final double steadyStateSetPoint = .5;
    final double maxSetPoint = steadyStateSetPoint*1.5;  // increase power 50% when ball is sensed
    final double pulseWidth = 0.01; // in seconds
    double currentSpeed = 0;
    double outputVoltage = 0;
    boolean midShotFlag = false;
 */   
    // Called just before this Command runs the first time
    protected void initialize() {
 //   	Robot.shooter.set(steadyStateSetPoint);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double joystick = Robot.oi.getShooterJoystick().getRawAxis(1) * -1;
    	
    	if(joystick > .25) {
    		Robot.shooter.setpointUp();
    	} else if (joystick < -.25) {
    		Robot.shooter.setpointDown();
    	}
    	
    	
/*   	currentSpeed = Robot.shooter.getEncoderSpeed();
    	outputVoltage = Robot.shooter.getOutputVoltage();
    	
//    	Robot.shooter.set(steadyStateSetPoint);
    	

    	if(currentSpeed > minSpeed){
    		Robot.shooter.arm();
    	}
    	
    	if(Robot.shooter.getIsArmed()){
    		if(currentSpeed < minSpeed){
    			Robot.shooter.set(maxSetPoint);
    			midShotFlag = true;
    		} else {
    			if(midShotFlag && currentSpeed < maxSpeed){
    				Robot.shooter.set(maxSetPoint);
    			}
    			if(midShotFlag && currentSpeed >= maxSpeed){
    				Robot.shooter.set(steadyStateSetPoint);
    				midShotFlag = false;
    			}
    		}
    	}
    	
 */
    	
    	/*if (Robot.shooter.getToggleShooter() == true) {
    		Robot.shooter.set(); 
    		
    	} else {
    		
    		Robot.shooter.setOff();
    	}
    	
    	if (Robot.oi.getShooterJoystick().getPOV(0) == 0) {
    		Robot.shooter.speedUp();
    	}
    	
    	if (Robot.oi.getShooterJoystick().getPOV(0) == 180) {
    		Robot.shooter.slowDown();
    	}
    	
    	if (Robot.shooter.speed > 0) {
    		Robot.shooter.speed = 0;
    	}
    	
    	if (Robot.shooter.speed < -1) {
    		Robot.shooter.speed = -1;
    		
    	}
    	
    	SmartDashboard.putNumber("Shooter Speed", Robot.shooter.showSpeed());
    	*/
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooter.stopMotor();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

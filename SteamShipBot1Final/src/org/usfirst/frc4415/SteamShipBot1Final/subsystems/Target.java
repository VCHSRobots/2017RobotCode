// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.subsystems;

import org.usfirst.frc4415.SteamShipBot1Final.RobotMap;
import org.usfirst.frc4415.SteamShipBot1Final.commands.*;
import edu.wpi.first.wpilibj.DigitalOutput;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Target extends Subsystem {
	
	private boolean m_state = false;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DigitalOutput boilerLight = RobotMap.targetBoilerLight;
    private final DigitalOutput gearLight = RobotMap.targetGearLight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private long m_previousStartTime = 0;
    private long lightTimer = 30000;


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TargetDefault());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void off(){
    	m_state = false;
    	boilerLight.set(m_state);
    	gearLight.set(m_state);
    }
    
    public void on(){
    	m_state = true;
    	m_previousStartTime = System.currentTimeMillis();
    	boilerLight.set(m_state);
    	gearLight.set(m_state);
    }
    
    public void toggle(){
    	m_state = !m_state;
    	if(m_state) on();
    }
    
    public long getLightTimer(){
    	return lightTimer;
    }
    
    public long getPreviousStartTime(){
    	return m_previousStartTime;
    }
}


// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final.subsystems;

import org.usfirst.frc4415.SteamShipBot1Final.RobotMap;
import org.usfirst.frc4415.SteamShipBot1Final.commands.*;
import org.usfirst.frc4415.SteamShipBot1Final.Robot;

import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Turret extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	boolean resetTurret = false;
	
	private final double LEFT = -1;
	private final double RIGHT = 1;
	private final double OFF = 0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final CANTalon turretMotor = RobotMap.turretturretMotor;
	private final DigitalInput leftLimit = RobotMap.turretLeftLimit;
	private final DigitalInput middleLimit = RobotMap.turretMiddleLimit;
	private final DigitalInput rightLimit = RobotMap.turretRightLimit;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new TurretDefault());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void turretRight() {
		turretMotor.set(RIGHT);
	}

	public void turretLeft() {
		turretMotor.set(LEFT);
	}

	public void turretOff() {
		turretMotor.set(OFF);
	}

	public boolean getLeftLimit() {
		return leftLimit.get();
	}

	public boolean getMiddleLimit() {
		return middleLimit.get();
	}

	public boolean getRightLimit() {
		return rightLimit.get();
	}

	public void turn(double power) {
		if ((power > (RIGHT / 8) && rightLimit.get() == true) || (power < (LEFT / 8) && leftLimit.get() == true)) {
			turretMotor.set(power);

		} else {
			turretMotor.set(OFF);
			
		}
	}
	
	public void reset() {
		if(middleLimit.get() == false){
			while(middleLimit.get() == false){
				turretMotor.set(RIGHT);			}
		}
		
		while(middleLimit.get() == true && leftLimit.get() == true) {
			turretMotor.set(LEFT);
		}

		if (middleLimit.get() == false) {
			long startTime = System.currentTimeMillis();
			while(System.currentTimeMillis() - startTime < 175){
				turretMotor.set(LEFT);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}	
		
		if (leftLimit.get() == false) {
			while(middleLimit.get() == true) {
				turretMotor.set(RIGHT);
			}
			long startTime = System.currentTimeMillis();
			while(System.currentTimeMillis() - startTime < 95){
				turretMotor.set(RIGHT);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			turretMotor.set(OFF);

		}
	}

}


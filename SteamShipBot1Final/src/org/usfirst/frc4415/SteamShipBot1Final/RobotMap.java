// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.SteamShipBot1Final;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainfrontLeft;
    public static CANTalon driveTrainfrontRight;
    public static CANTalon driveTrainrearLeft;
    public static CANTalon driveTrainrearRight;
    public static RobotDrive driveTrainRobotDrive4;
    public static DoubleSolenoid driveTrainchangeSolenoid;
    public static Encoder driveTrainQuadratureEncoder1;
    public static CANTalon shootershooterMotor;
    public static CANTalon blenderblenderMotor;
    public static CANTalon climberclimberMotor;
    public static Encoder climberQuadratureEncoder1;
    public static CANTalon turretturretMotor;
    public static DigitalInput turretLeftLimit;
    public static DigitalInput turretMiddleLimit;
    public static DigitalInput turretRightLimit;
    public static DoubleSolenoid gearHandlergearHandlerSolenoid;
    public static DoubleSolenoid gearHandlergearGrabSolenoid;
    public static Servo cameraSystemServo;
    public static DigitalOutput cameraSystemLED;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainfrontLeft = new CANTalon(2);
        LiveWindow.addActuator("Drive Train", "frontLeft", driveTrainfrontLeft);
        
        driveTrainfrontRight = new CANTalon(6);
        LiveWindow.addActuator("Drive Train", "frontRight", driveTrainfrontRight);
        
        driveTrainrearLeft = new CANTalon(1);
        LiveWindow.addActuator("Drive Train", "rearLeft", driveTrainrearLeft);
        
        driveTrainrearRight = new CANTalon(5);
        LiveWindow.addActuator("Drive Train", "rearRight", driveTrainrearRight);
        
        driveTrainRobotDrive4 = new RobotDrive(driveTrainfrontLeft, driveTrainrearLeft,
              driveTrainfrontRight, driveTrainrearRight);
        
        driveTrainRobotDrive4.setSafetyEnabled(true);
        driveTrainRobotDrive4.setExpiration(0.1);
        driveTrainRobotDrive4.setSensitivity(0.5);
        driveTrainRobotDrive4.setMaxOutput(1.0);

        driveTrainchangeSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Drive Train", "changeSolenoid", driveTrainchangeSolenoid);
        
        driveTrainQuadratureEncoder1 = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Quadrature Encoder 1", driveTrainQuadratureEncoder1);
        driveTrainQuadratureEncoder1.setDistancePerPulse(1.0);
        driveTrainQuadratureEncoder1.setPIDSourceType(PIDSourceType.kDisplacement);
        shootershooterMotor = new CANTalon(0);
        LiveWindow.addActuator("Shooter", "shooterMotor", shootershooterMotor);
        
        blenderblenderMotor = new CANTalon(3);
        LiveWindow.addActuator("Blender", "blenderMotor", blenderblenderMotor);
        
        climberclimberMotor = new CANTalon(8);
        LiveWindow.addActuator("Climber", "climberMotor", climberclimberMotor);
        
        climberQuadratureEncoder1 = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Climber", "Quadrature Encoder 1", climberQuadratureEncoder1);
        climberQuadratureEncoder1.setDistancePerPulse(1.0);
        climberQuadratureEncoder1.setPIDSourceType(PIDSourceType.kDisplacement);
        turretturretMotor = new CANTalon(4);
        LiveWindow.addActuator("Turret", "turretMotor", turretturretMotor);
        
        turretLeftLimit = new DigitalInput(2);
        LiveWindow.addSensor("Turret", "Left Limit", turretLeftLimit);
        
        turretMiddleLimit = new DigitalInput(0);
        LiveWindow.addSensor("Turret", "Middle Limit", turretMiddleLimit);
        
        turretRightLimit = new DigitalInput(1);
        LiveWindow.addSensor("Turret", "Right Limit", turretRightLimit);
        
        gearHandlergearHandlerSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Gear Handler", "gearHandlerSolenoid", gearHandlergearHandlerSolenoid);
        
        gearHandlergearGrabSolenoid = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Gear Handler", "gearGrabSolenoid", gearHandlergearGrabSolenoid);
        
        cameraSystemServo = new Servo(0);
        LiveWindow.addActuator("Camera System", "Servo", cameraSystemServo);
        
        cameraSystemLED = new DigitalOutput(8);
        LiveWindow.addActuator("Camera System", "LED", cameraSystemLED);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        turretturretMotor.setInverted(true);
        
    }
    
}
